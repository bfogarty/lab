import re
from unittest.mock import patch
import pytest
import cdk8s
from typing import Any, Generator

from lab.charts.grafana import GrafanaAlloy, GrafanaAlloyCrd, get_chart_values
from lab.libs.config import GrafanaConfig, GrafanaServiceConfig
from pydantic import SecretStr
from tests.utils import get_resource


CONFIG = GrafanaConfig(
    cluster_name="cluster-name",
    access_policy_token=SecretStr("token"),
    loki=GrafanaServiceConfig(host="loki-host", username="loki-username"),
    prometheus=GrafanaServiceConfig(host="prom-host", username="prom-username"),
    remote_config=GrafanaServiceConfig(host="fleet-host", username="fleet-username"),
)


class TestGrafanaAlloyCrd:
    def test_creates_crd(self) -> None:
        chart = GrafanaAlloyCrd(cdk8s.Testing.app(), "grafana-alloy-crd").to_json()
        assert get_resource(
            chart, "CustomResourceDefinition", "alloys.collectors.grafana.com"
        )

    def test_pins_helm_chart_version(self) -> None:
        with patch("lab.charts.grafana.Helm", autospec=True) as mocked_helm:
            GrafanaAlloyCrd(cdk8s.Testing.app(), "grafana-alloy-crd")
            call_kwargs = mocked_helm.call_args.kwargs

        assert "https://grafana.github.io/helm-charts" == call_kwargs["repo"]
        assert "alloy-crd" == call_kwargs["chart"]
        assert GrafanaAlloyCrd.CHART_VERSION == call_kwargs["version"]


class TestGrafanaAlloy:
    @pytest.fixture(scope="class")
    def chart(self) -> Generator[list[Any], None, None]:
        yield GrafanaAlloy(
            cdk8s.Testing.app(), "grafana-alloy", config=CONFIG
        ).to_json()

    def test_creates_namespace(self, chart: list[Any]) -> None:
        assert get_resource(chart, "Namespace", GrafanaAlloy.NAMESPACE)

    def test_grafana_alloy_operator_deployment(self, chart: list[Any]) -> None:
        # test that we have at least one resource we expect from the Helm chart
        assert get_resource(chart, "Deployment", name=re.compile(".*alloy-operator"))

    def test_pins_helm_chart_version(self) -> None:
        with patch("lab.charts.grafana.Helm", autospec=True) as mocked_helm:
            GrafanaAlloy(cdk8s.Testing.app(), "grafana-alloy", config=CONFIG)
            call_kwargs = mocked_helm.call_args.kwargs

        assert "https://grafana.github.io/helm-charts" == call_kwargs["repo"]
        assert "k8s-monitoring" == call_kwargs["chart"]
        assert GrafanaAlloy.CHART_VERSION == call_kwargs["version"]

    def test_helm_resources_are_namespaced(self, chart: list[Any]) -> None:
        assert all(
            x["metadata"]["namespace"] == GrafanaAlloy.NAMESPACE
            for x in chart
            if x["kind"] != "Namespace"
        )


class TestGetChartValues:
    """
    These tests make some assertions about the autogenerated Helm chart values
    provided by Grafana Cloud. They are not exhaustive, and may be brittle.
    """

    def test_cluster_id(self) -> None:
        values = get_chart_values(CONFIG)
        assert {"name": CONFIG.cluster_name} == values["cluster"]

        cluster_name_env = {"name": "CLUSTER_NAME", "value": CONFIG.cluster_name}
        assert cluster_name_env in values["alloy-metrics"]["alloy"]["extraEnv"]
        assert cluster_name_env in values["alloy-singleton"]["alloy"]["extraEnv"]
        assert cluster_name_env in values["alloy-logs"]["alloy"]["extraEnv"]

    def test_destinations(self) -> None:
        values = get_chart_values(CONFIG)

        assert {
            "name": "grafana-cloud-metrics",
            "type": "prometheus",
            "url": f"{CONFIG.prometheus.host}/push",
            "auth": {
                "type": "basic",
                "username": CONFIG.prometheus.username,
                "password": CONFIG.access_policy_token.get_secret_value(),
            },
        } in values["destinations"]

        assert {
            "name": "grafana-cloud-logs",
            "type": "loki",
            "url": f"{CONFIG.loki.host}/push",
            "auth": {
                "type": "basic",
                "username": CONFIG.loki.username,
                "password": CONFIG.access_policy_token.get_secret_value(),
            },
        } in values["destinations"]

        assert 2 == len(values["destinations"])

    def test_remote_config_is_enabled(self) -> None:
        values = get_chart_values(CONFIG)

        remote_config = {
            "enabled": True,
            "url": CONFIG.remote_config.host,
            "auth": {
                "type": "basic",
                "username": CONFIG.remote_config.username,
                "password": CONFIG.access_policy_token.get_secret_value(),
            },
        }

        assert remote_config == values["alloy-metrics"]["remoteConfig"]
        assert remote_config == values["alloy-singleton"]["remoteConfig"]
        assert remote_config == values["alloy-logs"]["remoteConfig"]

    def test_enabled_features(self) -> None:
        values = get_chart_values(CONFIG)

        # enabled features
        assert values["clusterMetrics"]["enabled"]
        assert values["annotationAutodiscovery"]["enabled"]
        assert values["prometheusOperatorObjects"]["enabled"]
        assert values["clusterEvents"]["enabled"]
        assert values["podLogs"]["enabled"]
        assert values["alloy-metrics"]["enabled"]
        assert values["alloy-singleton"]["enabled"]
        assert values["alloy-logs"]["enabled"]

        # disabled features
        assert "opencost" not in values["clusterMetrics"]
        assert "kepler" not in values["clusterMetrics"]
        assert "nodeLogs" not in values
        assert "alloy-receiver" not in values
        assert "applicationObservability" not in values
        assert "autoInstrumentation" not in values
        assert "profiling" not in values
