from constructs import Construct

from cdk8s import ApiObjectMetadata, Chart, Helm

import cdk8s_plus_29 as kplus
from lab.libs.config import GrafanaConfig


def get_chart_values(config: GrafanaConfig) -> dict:
    # autogenerated as YAML by Grafana Cloud, converted to a dict, and updated
    # with secrets from the config:
    #   https://DOMAIN.grafana.net/a/grafana-k8s-app/configuration/cluster-config
    return {
        "cluster": {"name": config.cluster_name},
        "destinations": [
            {
                "name": "grafana-cloud-metrics",
                "type": "prometheus",
                "url": f"{config.prometheus.host}/push",
                "auth": {
                    "type": "basic",
                    "username": config.prometheus.username,
                    "password": config.access_policy_token.get_secret_value(),
                },
            },
            {
                "name": "grafana-cloud-logs",
                "type": "loki",
                "url": f"{config.loki.host}/push",
                "auth": {
                    "type": "basic",
                    "username": config.loki.username,
                    "password": config.access_policy_token.get_secret_value(),
                },
            },
        ],
        "clusterMetrics": {"enabled": True},
        "annotationAutodiscovery": {"enabled": True},
        "prometheusOperatorObjects": {"enabled": True},
        "clusterEvents": {"enabled": True},
        "podLogs": {"enabled": True},
        "alloy-metrics": {
            "enabled": True,
            "alloy": {
                "extraEnv": [
                    {
                        "name": "GCLOUD_RW_API_KEY",
                        "valueFrom": {
                            "secretKeyRef": {
                                "name": "alloy-metrics-remote-cfg-grafana-k8s-monitoring",
                                "key": "password",
                            }
                        },
                    },
                    {"name": "CLUSTER_NAME", "value": config.cluster_name},
                    {
                        "name": "NAMESPACE",
                        "valueFrom": {"fieldRef": {"fieldPath": "metadata.namespace"}},
                    },
                    {
                        "name": "POD_NAME",
                        "valueFrom": {"fieldRef": {"fieldPath": "metadata.name"}},
                    },
                    {
                        "name": "GCLOUD_FM_COLLECTOR_ID",
                        "value": "grafana-k8s-monitoring-$(CLUSTER_NAME)-$(NAMESPACE)-$(POD_NAME)",
                    },
                ]
            },
            "remoteConfig": {
                "enabled": True,
                "url": config.remote_config.host,
                "auth": {
                    "type": "basic",
                    "username": config.remote_config.username,
                    "password": config.access_policy_token.get_secret_value(),
                },
            },
        },
        "alloy-singleton": {
            "enabled": True,
            "alloy": {
                "extraEnv": [
                    {
                        "name": "GCLOUD_RW_API_KEY",
                        "valueFrom": {
                            "secretKeyRef": {
                                "name": "alloy-singleton-remote-cfg-grafana-k8s-monitoring",
                                "key": "password",
                            }
                        },
                    },
                    {"name": "CLUSTER_NAME", "value": config.cluster_name},
                    {
                        "name": "NAMESPACE",
                        "valueFrom": {"fieldRef": {"fieldPath": "metadata.namespace"}},
                    },
                    {
                        "name": "POD_NAME",
                        "valueFrom": {"fieldRef": {"fieldPath": "metadata.name"}},
                    },
                    {
                        "name": "GCLOUD_FM_COLLECTOR_ID",
                        "value": "grafana-k8s-monitoring-$(CLUSTER_NAME)-$(NAMESPACE)-$(POD_NAME)",
                    },
                ]
            },
            "remoteConfig": {
                "enabled": True,
                "url": config.remote_config.host,
                "auth": {
                    "type": "basic",
                    "username": config.remote_config.username,
                    "password": config.access_policy_token.get_secret_value(),
                },
            },
        },
        "alloy-logs": {
            "enabled": True,
            "alloy": {
                "extraEnv": [
                    {
                        "name": "GCLOUD_RW_API_KEY",
                        "valueFrom": {
                            "secretKeyRef": {
                                "name": "alloy-logs-remote-cfg-grafana-k8s-monitoring",
                                "key": "password",
                            }
                        },
                    },
                    {"name": "CLUSTER_NAME", "value": config.cluster_name},
                    {
                        "name": "NAMESPACE",
                        "valueFrom": {"fieldRef": {"fieldPath": "metadata.namespace"}},
                    },
                    {
                        "name": "POD_NAME",
                        "valueFrom": {"fieldRef": {"fieldPath": "metadata.name"}},
                    },
                    {
                        "name": "NODE_NAME",
                        "valueFrom": {"fieldRef": {"fieldPath": "spec.nodeName"}},
                    },
                    {
                        "name": "GCLOUD_FM_COLLECTOR_ID",
                        "value": "grafana-k8s-monitoring-$(CLUSTER_NAME)-$(NAMESPACE)-alloy-logs-$(NODE_NAME)",
                    },
                ]
            },
            "remoteConfig": {
                "enabled": True,
                "url": config.remote_config.host,
                "auth": {
                    "type": "basic",
                    "username": config.remote_config.username,
                    "password": config.access_policy_token.get_secret_value(),
                },
            },
        },
    }


class GrafanaAlloyCrd(Chart):
    CHART_VERSION = "1.0.0"

    def __init__(self, scope: Construct, id_: str):
        super().__init__(scope, id_)

        Helm(
            self,
            f"{id_}-helm",
            repo="https://grafana.github.io/helm-charts",
            chart="alloy-crd",
            version=GrafanaAlloyCrd.CHART_VERSION,
            helm_flags=["--include-crds"],
        )


class GrafanaAlloy(Chart):
    NAMESPACE = "grafana"

    CHART_VERSION = "3.1.0"

    def __init__(
        self,
        scope: Construct,
        id_: str,
        *,
        config: GrafanaConfig,
    ):
        super().__init__(scope, id_, namespace=GrafanaAlloy.NAMESPACE)

        kplus.Namespace(
            self, id_, metadata=ApiObjectMetadata(name=GrafanaAlloy.NAMESPACE)
        )

        Helm(
            self,
            f"{id_}-helm",
            repo="https://grafana.github.io/helm-charts",
            # ensure the release name is the same as the chart name, this avoids
            # Helm prefixing object names, breaking the autogenerated values
            release_name="grafana-k8s-monitoring",
            chart="k8s-monitoring",
            version=GrafanaAlloy.CHART_VERSION,
            namespace=GrafanaAlloy.NAMESPACE,
            values=get_chart_values(config),
        )
